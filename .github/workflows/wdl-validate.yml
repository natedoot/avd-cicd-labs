name: Validate and Merge Network Configurations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The branch to validate (for inventory selection)"
        required: true
        default: "feature-branch"

permissions:
  issues: write  # Grant permissions to create GitHub issues
  contents: write  # Allow merging branches into main

jobs:
  validate:
    runs-on: self-hosted
    env:  # Set environment variables here
      CV_SVC_TOKEN: ${{ secrets.CV_SVC_TOKEN }}
      ANSIBLE_USERNAME: ${{ secrets.ANSIBLE_USERNAME }}
      ANSIBLE_PASSWORD: ${{ secrets.ANSIBLE_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.environment }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Ansible and AVD roles
        run: |
          pip install "pyavd[ansible]"
          ansible-galaxy collection install arista.avd

      - name: Run AVD Validate State
        run: |
          cd tech-library/datacenter
          make avd-build
          make avd-validate

      - name: Parse Validation Report
        run: |
          cd tech-library/datacenter/reports
          if grep -q ",FAILs," FABRIC-state.csv; then
            echo "Validation failures detected in FABRIC-state.csv:"
            grep ",FAIL," FABRIC-state.csv
            exit 1
          else
            echo "No validation failures detected."
          fi


      - name: Create GitHub Issue on Validation Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue create --title "Validation Failure in ${{ github.event.inputs.environment }}" \
                          --body "The validation step failed for environment: ${{ github.event.inputs.environment }}. Please investigate the logs for more details."

      - name: Build and Deploy Configs on Failure
        if: failure()
        run: |
          git fetch origin main
          git checkout main
          cd tech-library/datacenter
          make pyavd-build
          make avd-deploy-rcc

  merge:
    needs: validate
    runs-on: self-hosted
    if: success()
    steps:
      - name: Checkout the Target Branch (Main)
        uses: actions/checkout@v3
        with:
          ref: main  # Ensure the 'main' branch is checked out

      - name: Merge Branch into Main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git merge --no-ff --allow-unrelated-histories ${{ github.event.inputs.environment }}
          git push origin main

