name: Validate and Merge Network Configurations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The branch to validate (for inventory selection)"
        required: true
        default: "feature-branch"

permissions:
  issues: write  # Grant permissions to create GitHub issues
  contents: write  # Allow creating pull requests

jobs:
  validate:
    runs-on: self-hosted
    env:
      CV_SVC_TOKEN: ${{ secrets.CV_SVC_TOKEN }}
      ANSIBLE_USERNAME: ${{ secrets.ANSIBLE_USERNAME }}
      ANSIBLE_PASSWORD: ${{ secrets.ANSIBLE_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.environment }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Ansible and AVD roles
        run: |
          pip install "pyavd[ansible]"
          ansible-galaxy collection install arista.avd
      - name: Run AVD Validate State
        run: |
          cd tech-library/datacenter
          make avd-build
          make avd-validate
      - name: Parse Validation Report
        run: |
          cd tech-library/datacenter/reports
          if grep -q ",FAIL," FABRIC-state.csv; then
            echo "Validation failures detected in FABRIC-state.csv:"
            grep ",FAIL," FABRIC-state.csv
            exit 1
          else
            echo "No validation failures detected."
          fi
      - name: Create GitHub Issue on Validation Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd tech-library/datacenter/reports
          echo "Validation failures detected in FABRIC-state.csv:" > issue_body.txt
          grep ",FAIL," FABRIC-state.csv >> issue_body.txt
          gh issue create --title "Validation Failure in ${{ github.event.inputs.environment }}" \
                          --body-file issue_body.txt
      - name: Build and Deploy Configs on Failure
        if: failure()
        run: |
          git fetch origin main
          git checkout main
          cd tech-library/datacenter
          make pyavd-build
          make avd-deploy-rcc

  merge:
    needs: validate
    runs-on: self-hosted
    if: success()
    steps:
      - name: Checkout the Main Branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Fetch Feature Branch
        run: |
          # Fetch the feature branch to ensure it is available for the PR
          git fetch origin ${{ github.event.inputs.environment }}

      - name: Ensure Label Exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the label exists
          LABEL_NAME="validation-success"
          LABEL_COLOR="0E8A16"
          LABEL_DESCRIPTION="Indicates successful validation"

          if ! gh api repos/${{ github.repository }}/labels --jq ".[] | select(.name == \"$LABEL_NAME\")" > /dev/null 2>&1; then
            # Create the label if it doesn't exist
            gh api repos/${{ github.repository }}/labels \
              -X POST \
              -f name="$LABEL_NAME" \
              -f color="$LABEL_COLOR" \
              -f description="$LABEL_DESCRIPTION"
          fi


      - name: Create Pull Request Body File
        run: |
          # Create a body file for the pull request
          echo "Validation was successful for the branch: ${{ github.event.inputs.environment }}." > /tmp/pr_body.txt
          echo "All checks passed, and the branch is ready to merge." >> /tmp/pr_body.txt

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --head ${{ github.event.inputs.environment }} \
            --base main \
            --title "Validation Successful for ${{ github.event.inputs.environment }}" \
            --body-file /tmp/pr_body.txt \
            --label "validation-success"
